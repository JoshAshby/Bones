# frozen_string_literal: true

require "open3"

# Common utility class for performing actions on a fossil repository
class Fossil::Repo
  attr_reader :repo, :repository_file

  def initialize repository_file
    @repository_file = repository_file

    @repo = repository_file.basename.sub_ext("").to_s
  end

  # Creates a new fossil repository at the initialized file location with
  # an admin user of the given username.
  #
  # Fails with a rdoc-ref:Fossil::ExistingRepositoryError if there is already
  # a repository at the location.
  #
  # Fails with a rdoc-ref:Fossil::FossilCommandError if Fossil exits with a
  # non-zero status.
  def create_repository username:
    if repository_file.exist?
      LOGGER.fossil "Attempted to create an existing repo #{ repository_file }"
      fail Fossil::ExistingRepositoryError, "Attempted to create an existing repo #{ self }"
    end

    status = run_fossil_command "new", "--admin-user", username, repository_file.to_s
    fail Fossil::FossilCommandError, "abnormal status creating new fossil #{ self } - #{ status.exitstatus }" unless status.success?

    nil
  end

  # Clone a remote repository to the initialized file location with
  # an admin user of the given username.
  #
  # Fails with a rdoc-ref:Fossil::ExistingRepositoryError if there is already
  # a repository at the location.
  #
  # Fails with a rdoc-ref:Fossil::FossilCommandError if Fossil exits with a
  # non-zero status.
  def clone_repository url:, username:
    if repository_file.exist?
      LOGGER.fossil "Attempted to clone an existing repo #{ repository_file }"
      fail Fossil::ExistingRepositoryError, "Attempted to clone an existing repo #{ self }"
    end

    status = run_fossil_command "clone", "--admin-user", username, url, repository_file.to_s
    fail Fossil::FossilCommandError, "abnormal status cloning fossil #{ url } #{ self } - #{ status.exitstatus }" unless status.success?

    nil
  end

  # Removes the Fossil repository file.
  def delete_repository!
    FileUtils.remove_file repository_file.to_s
  end

  # Creates a new user and adds the 's' superuser capability to the new user.
  # Will auto generate a password if none is given. Returns the password,
  # helpful for when it is autogenerated.
  #
  # See {Fossil Capability 's'}(https://fossil-scm.org/home/doc/trunk/www/caps/admin-v-setup.md)
  def create_user username:, contact_info:, password: nil
    password ||= SecureRandom.hex(20)

    status = run_fossil_command "user", "new", username, contact_info, password, "--repository", repository_file.to_s
    fail Fossil::FossilCommandError, "abnormal status creating a new user in fossil #{ self } - #{ status.exitstatus }" unless status.success?

    status = run_fossil_command "user", "capabilities", username, "s", "--repository", repository_file.to_s
    fail Fossil::FossilCommandError, "abnormal status setting user's superuser capabilities in fossil #{ self } - #{ status.exitstatus }" unless status.success?

    password
  end

  # Changes an existing users password. Will auto generate a password if none
  # is given. Returns the password, helpful for when it is autogenerated.
  def change_password username:, password: nil
    password = SecureRandom.hex(20) if password.nil? || password.empty?

    status = run_fossil_command "user", "password", username, password, "--repository", repository_file.to_s
    fail Fossil::FossilCommandError, "abnormal status changing user password in fossil #{ self } - #{ status.exitstatus }" unless status.success?

    password
  end

  # Runs the Fossil binary with the given set of commands, writing STDOUT and
  # STDERR to the log and returning the Process::Status.
  def run_fossil_command *args
    log, status = Open3.capture2e(Fossil.fossil_binary, *args)
    LOGGER.fossil "Ran fossil command `fossil #{ args.join ' ' }'", status: status
    LOGGER.fossil log
    status
  end

  # Connects to the Fossil repository as a Sqlite DB.
  #
  # Yields the connection, closing it at the end if a block is given,
  # otherwise returns the connection.
  def repository_db &block
    Sequel.connect "sqlite://#{ repository_file }", logger: LOGGER, &block
  end
end
